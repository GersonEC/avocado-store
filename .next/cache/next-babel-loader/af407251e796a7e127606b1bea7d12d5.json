{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar _s = $RefreshSig$();\n\nimport * as React from 'react';\n/*[\r\n  {\r\n    cartAvo: {},\r\n    quantity: 5\r\n  },\r\n  {\r\n    cartAvo: {},\r\n    quantity: 3\r\n  }\r\n]*/\n\nvar initialState = {\n  cartAvo: {},\n  quantity: 0\n};\nvar CartAvosContext = /*#__PURE__*/React.createContext(initialState);\n\nfunction cartAvosReducer(state, action) {\n  switch (action.type) {\n    case 'add':\n      {\n        var _action$payload = action.payload,\n            cartAvo = _action$payload.cartAvo,\n            quantity = _action$payload.quantity;\n        var item = state.cartAvos.find(function (el) {\n          return el.id === cartAvo.id;\n        });\n\n        var newState = _toConsumableArray(state);\n\n        if (item) {\n          //update\n          item.quantity = quantity;\n          var index = newState.findIndex(function (el) {\n            return el.id === cartAvo.id;\n          });\n          newState[index] = item;\n        } else {\n          //add\n          newState.push(action.payload);\n        }\n\n        return newState;\n      }\n  }\n}\n\nfunction CartProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _React$useReducer = React.useReducer(cartAvosReducer),\n      _React$useReducer2 = _slicedToArray(_React$useReducer, 2),\n      state = _React$useReducer2[0],\n      dispatch = _React$useReducer2[1];\n}\n\n_s(CartProvider, \"GLYnMQ8Xkooi29FkxmARXYan304=\");\n\n_c = CartProvider;\nexport default CartAvosContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["C:/code/avocado-store/contexts/cartAvosContext.ts"],"names":["React","initialState","cartAvo","quantity","CartAvosContext","createContext","cartAvosReducer","state","action","type","payload","item","cartAvos","find","el","id","newState","index","findIndex","push","CartProvider","children","useReducer","dispatch"],"mappings":";;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAYA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,OAAO,EAAE,EADU;AAEnBC,EAAAA,QAAQ,EAAE;AAFS,CAArB;AAKA,IAAMC,eAAe,gBAAGJ,KAAK,CAACK,aAAN,CAAwCJ,YAAxC,CAAxB;;AAEA,SAASK,eAAT,CAAyBC,KAAzB,EAAqCC,MAArC,EAA6D;AAC3D,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,KAAL;AAAY;AACV,8BAA8BD,MAAM,CAACE,OAArC;AAAA,YAAQR,OAAR,mBAAQA,OAAR;AAAA,YAAiBC,QAAjB,mBAAiBA,QAAjB;AACA,YAAMQ,IAAI,GAAGJ,KAAK,CAACK,QAAN,CAAeC,IAAf,CAAoB,UAACC,EAAD;AAAA,iBAAkBA,EAAE,CAACC,EAAH,KAAUb,OAAO,CAACa,EAApC;AAAA,SAApB,CAAb;;AACA,YAAMC,QAAQ,sBAAOT,KAAP,CAAd;;AACA,YAAII,IAAJ,EAAU;AACR;AACAA,UAAAA,IAAI,CAACR,QAAL,GAAgBA,QAAhB;AACA,cAAMc,KAAK,GAAGD,QAAQ,CAACE,SAAT,CAAmB,UAACJ,EAAD;AAAA,mBAAkBA,EAAE,CAACC,EAAH,KAAUb,OAAO,CAACa,EAApC;AAAA,WAAnB,CAAd;AACAC,UAAAA,QAAQ,CAACC,KAAD,CAAR,GAAkBN,IAAlB;AACD,SALD,MAKO;AACL;AACAK,UAAAA,QAAQ,CAACG,IAAT,CAAcX,MAAM,CAACE,OAArB;AACD;;AACD,eAAOM,QAAP;AACD;AAfH;AAiBD;;AAED,SAASI,YAAT,OAAoC;AAAA;;AAAA,MAAZC,QAAY,QAAZA,QAAY;;AAClC,0BAA0BrB,KAAK,CAACsB,UAAN,CAAiBhB,eAAjB,CAA1B;AAAA;AAAA,MAAOC,KAAP;AAAA,MAAcgB,QAAd;AACD;;GAFQH,Y;;KAAAA,Y;AAIT,eAAehB,eAAf","sourcesContent":["import * as React from 'react'\r\n\r\n/*[\r\n  {\r\n    cartAvo: {},\r\n    quantity: 5\r\n  },\r\n  {\r\n    cartAvo: {},\r\n    quantity: 3\r\n  }\r\n]*/\r\n\r\ninterface CartContextProps {\r\n  cartAvo: TProduct\r\n  quantity: number\r\n}\r\n\r\ninterface CartAvosAction {\r\n  type: string\r\n  payload: CartContextProps\r\n}\r\n\r\nconst initialState = {\r\n  cartAvo: {} as TProduct,\r\n  quantity: 0,\r\n}\r\n\r\nconst CartAvosContext = React.createContext<CartContextProps[]>(initialState)\r\n\r\nfunction cartAvosReducer(state: any, action: CartAvosAction) {\r\n  switch (action.type) {\r\n    case 'add': {\r\n      const { cartAvo, quantity } = action.payload\r\n      const item = state.cartAvos.find((el: TProduct) => el.id === cartAvo.id)\r\n      const newState = [...state]\r\n      if (item) {\r\n        //update\r\n        item.quantity = quantity\r\n        const index = newState.findIndex((el: TProduct) => el.id === cartAvo.id)\r\n        newState[index] = item\r\n      } else {\r\n        //add\r\n        newState.push(action.payload)\r\n      }\r\n      return newState\r\n    }\r\n  }\r\n}\r\n\r\nfunction CartProvider({ children }) {\r\n  const [state, dispatch] = React.useReducer(cartAvosReducer)\r\n}\r\n\r\nexport default CartAvosContext\r\n"]},"metadata":{},"sourceType":"module"}