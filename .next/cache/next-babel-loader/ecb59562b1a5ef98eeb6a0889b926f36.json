{"ast":null,"code":"var _jsxFileName = \"C:\\\\code\\\\avocado-store\\\\pages\\\\_app.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport Layout from '@components/Layout/Layout';\nimport NProgress from 'nprogress';\nimport Router from 'next/router';\nimport 'styles/index.scss';\nRouter.events.on('routeChangeStart', () => NProgress.start());\nRouter.events.on('routeChangeComplete', () => NProgress.done());\nRouter.events.on('routeChangeError', () => NProgress.done()); //MyApp is useful to inject Providers.\n//Layouts\n//Additional props.\n\nfunction MyApp({\n  Component,\n  pageProps\n}) {\n  return __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 5\n    }\n  }, __jsx(Component, _extends({}, pageProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }\n  })));\n} // Only uncomment this method if you have blocking data requirements for\n// every single page in your application. This disables the ability to\n// perform automatic static optimization, causing every page in your app to\n// be server-side rendered.\n//\n// MyApp.getInitialProps = async (appContext) => {\n//   // calls page's `getInitialProps` and fills `appProps.pageProps`\n//   const appProps = await App.getInitialProps(appContext);\n//\n//   return { ...appProps }\n// }\n\n\nexport default MyApp;","map":{"version":3,"sources":["C:/code/avocado-store/pages/_app.tsx"],"names":["Layout","NProgress","Router","events","on","start","done","MyApp","Component","pageProps"],"mappings":";;;;;;AAAA,OAAOA,MAAP,MAAmB,2BAAnB;AAEA,OAAOC,SAAP,MAAsB,WAAtB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAO,mBAAP;AAEAA,MAAM,CAACC,MAAP,CAAcC,EAAd,CAAiB,kBAAjB,EAAqC,MAAMH,SAAS,CAACI,KAAV,EAA3C;AACAH,MAAM,CAACC,MAAP,CAAcC,EAAd,CAAiB,qBAAjB,EAAwC,MAAMH,SAAS,CAACK,IAAV,EAA9C;AACAJ,MAAM,CAACC,MAAP,CAAcC,EAAd,CAAiB,kBAAjB,EAAqC,MAAMH,SAAS,CAACK,IAAV,EAA3C,E,CAEA;AACA;AACA;;AACA,SAASC,KAAT,CAAe;AAAEC,EAAAA,SAAF;AAAaC,EAAAA;AAAb,CAAf,EAAmD;AACjD,SACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,SAAD,eAAeA,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF,CADF;AAKD,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAeF,KAAf","sourcesContent":["import Layout from '@components/Layout/Layout'\r\nimport { AppProps } from 'next/app'\r\nimport NProgress from 'nprogress';\r\nimport Router from 'next/router'\r\nimport 'styles/index.scss'\r\n\r\nRouter.events.on('routeChangeStart', () => NProgress.start());\r\nRouter.events.on('routeChangeComplete', () => NProgress.done());\r\nRouter.events.on('routeChangeError', () => NProgress.done());\r\n\r\n//MyApp is useful to inject Providers.\r\n//Layouts\r\n//Additional props.\r\nfunction MyApp({ Component, pageProps }: AppProps) {\r\n  return (\r\n    <Layout>\r\n      <Component {...pageProps} />\r\n    </Layout>\r\n  )\r\n}\r\n\r\n// Only uncomment this method if you have blocking data requirements for\r\n// every single page in your application. This disables the ability to\r\n// perform automatic static optimization, causing every page in your app to\r\n// be server-side rendered.\r\n//\r\n// MyApp.getInitialProps = async (appContext) => {\r\n//   // calls page's `getInitialProps` and fills `appProps.pageProps`\r\n//   const appProps = await App.getInitialProps(appContext);\r\n//\r\n//   return { ...appProps }\r\n// }\r\n\r\nexport default MyApp\r\n"]},"metadata":{},"sourceType":"module"}