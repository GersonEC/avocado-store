{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar _jsxFileName = \"C:\\\\code\\\\avocado-store\\\\contexts\\\\cartAvosContext.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport * as React from 'react';\nvar CartAvosContext = /*#__PURE__*/React.createContext(undefined);\n\nfunction cartAvosReducer(state, action) {\n  switch (action.type) {\n    case 'add':\n      {\n        var _action$payload = action.payload,\n            cartAvo = _action$payload.cartAvo,\n            quantity = _action$payload.quantity;\n        var item = state.find(function (el) {\n          return el.cartAvo.id === cartAvo.id;\n        });\n\n        var newState = _toConsumableArray(state);\n\n        if (item) {\n          //update\n          item.quantity = quantity;\n          var index = newState.findIndex(function (el) {\n            return el.cartAvo.id === cartAvo.id;\n          });\n          newState[index] = item;\n        } else {\n          //add\n          newState.push(action.payload);\n        }\n\n        return newState;\n      }\n\n    default:\n      {\n        throw new Error(\"Unhandled action type: \".concat(action.type));\n      }\n  }\n}\n\nvar initialState = [];\n\nfunction CartProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _React$useReducer = React.useReducer(cartAvosReducer, initialState),\n      _React$useReducer2 = _slicedToArray(_React$useReducer, 2),\n      state = _React$useReducer2[0],\n      dispatch = _React$useReducer2[1];\n\n  var value = {\n    state: state,\n    dispatch: dispatch\n  };\n  return __jsx(CartAvosContext.Provider, {\n    value: value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }, children);\n}\n\n_s(CartProvider, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n\n_c = CartProvider;\n\nfunction useAvoCart() {\n  _s2();\n\n  var context = React.useContext(CartAvosContext);\n\n  if (context === undefined) {\n    throw new Error('useAvoCart must be used within a CartAvosContext');\n  }\n\n  return context;\n}\n\n_s2(useAvoCart, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nexport { CartProvider, useAvoCart };\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["C:/code/avocado-store/contexts/cartAvosContext.tsx"],"names":["React","CartAvosContext","createContext","undefined","cartAvosReducer","state","action","type","payload","cartAvo","quantity","item","find","el","id","newState","index","findIndex","push","Error","initialState","CartProvider","children","useReducer","dispatch","value","useAvoCart","context","useContext"],"mappings":";;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAcA,IAAMC,eAAe,gBAAGD,KAAK,CAACE,aAAN,CAEtBC,SAFsB,CAAxB;;AAIA,SAASC,eAAT,CAAyBC,KAAzB,EAA6CC,MAA7C,EAAiE;AAC/D,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,KAAL;AAAY;AACV,8BAA8BD,MAAM,CAACE,OAArC;AAAA,YAAQC,OAAR,mBAAQA,OAAR;AAAA,YAAiBC,QAAjB,mBAAiBA,QAAjB;AACA,YAAMC,IAAI,GAAGN,KAAK,CAACO,IAAN,CAAW,UAACC,EAAD;AAAA,iBAAQA,EAAE,CAACJ,OAAH,CAAWK,EAAX,KAAkBL,OAAO,CAACK,EAAlC;AAAA,SAAX,CAAb;;AACA,YAAMC,QAAQ,sBAAOV,KAAP,CAAd;;AACA,YAAIM,IAAJ,EAAU;AACR;AACAA,UAAAA,IAAI,CAACD,QAAL,GAAgBA,QAAhB;AACA,cAAMM,KAAK,GAAGD,QAAQ,CAACE,SAAT,CAAmB,UAACJ,EAAD;AAAA,mBAAQA,EAAE,CAACJ,OAAH,CAAWK,EAAX,KAAkBL,OAAO,CAACK,EAAlC;AAAA,WAAnB,CAAd;AACAC,UAAAA,QAAQ,CAACC,KAAD,CAAR,GAAkBL,IAAlB;AACD,SALD,MAKO;AACL;AACAI,UAAAA,QAAQ,CAACG,IAAT,CAAcZ,MAAM,CAACE,OAArB;AACD;;AACD,eAAOO,QAAP;AACD;;AACD;AAAS;AACP,cAAM,IAAII,KAAJ,kCAAoCb,MAAM,CAACC,IAA3C,EAAN;AACD;AAlBH;AAoBD;;AAED,IAAMa,YAAY,GAAG,EAArB;;AAEA,SAASC,YAAT,OAAyC;AAAA;;AAAA,MAAjBC,QAAiB,QAAjBA,QAAiB;;AACvC,0BAA0BtB,KAAK,CAACuB,UAAN,CAAiBnB,eAAjB,EAAkCgB,YAAlC,CAA1B;AAAA;AAAA,MAAOf,KAAP;AAAA,MAAcmB,QAAd;;AACA,MAAMC,KAAK,GAAG;AAAEpB,IAAAA,KAAK,EAALA,KAAF;AAASmB,IAAAA,QAAQ,EAARA;AAAT,GAAd;AACA,SACE,MAAC,eAAD,CAAiB,QAAjB;AAA0B,IAAA,KAAK,EAAEC,KAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGH,QADH,CADF;AAKD;;GARQD,Y;;KAAAA,Y;;AAUT,SAASK,UAAT,GAAsB;AAAA;;AACpB,MAAMC,OAAO,GAAG3B,KAAK,CAAC4B,UAAN,CAAiB3B,eAAjB,CAAhB;;AACA,MAAI0B,OAAO,KAAKxB,SAAhB,EAA2B;AACzB,UAAM,IAAIgB,KAAJ,CAAU,kDAAV,CAAN;AACD;;AACD,SAAOQ,OAAP;AACD;;IANQD,U;;AAQT,SAASL,YAAT,EAAuBK,UAAvB","sourcesContent":["import * as React from 'react'\r\n\r\ninterface CartState {\r\n  cartAvo: TProduct\r\n  quantity: number\r\n}\r\n\r\ninterface CartAction {\r\n  type: 'add'\r\n  payload: CartState\r\n}\r\n\r\ntype Dispatch = (action: CartAction) => void\r\n\r\nconst CartAvosContext = React.createContext<\r\n  { state: CartState[]; dispatch: Dispatch } | undefined\r\n>(undefined)\r\n\r\nfunction cartAvosReducer(state: CartState[], action: CartAction) {\r\n  switch (action.type) {\r\n    case 'add': {\r\n      const { cartAvo, quantity } = action.payload\r\n      const item = state.find((el) => el.cartAvo.id === cartAvo.id)\r\n      const newState = [...state]\r\n      if (item) {\r\n        //update\r\n        item.quantity = quantity\r\n        const index = newState.findIndex((el) => el.cartAvo.id === cartAvo.id)\r\n        newState[index] = item\r\n      } else {\r\n        //add\r\n        newState.push(action.payload)\r\n      }\r\n      return newState\r\n    }\r\n    default: {\r\n      throw new Error(`Unhandled action type: ${action.type}`)\r\n    }\r\n  }\r\n}\r\n\r\nconst initialState = [] as CartState[]\r\n\r\nfunction CartProvider({ children }: any) {\r\n  const [state, dispatch] = React.useReducer(cartAvosReducer, initialState)\r\n  const value = { state, dispatch }\r\n  return (\r\n    <CartAvosContext.Provider value={value}>\r\n      {children}\r\n    </CartAvosContext.Provider>\r\n  )\r\n}\r\n\r\nfunction useAvoCart() {\r\n  const context = React.useContext(CartAvosContext)\r\n  if (context === undefined) {\r\n    throw new Error('useAvoCart must be used within a CartAvosContext')\r\n  }\r\n  return context\r\n}\r\n\r\nexport { CartProvider, useAvoCart }\r\n"]},"metadata":{},"sourceType":"module"}