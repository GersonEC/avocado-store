{"ast":null,"code":"var _jsxFileName = \"C:\\\\code\\\\avocado-store\\\\contexts\\\\cartAvosContext.tsx\";\nvar __jsx = React.createElement;\nimport * as React from 'react';\nconst CartAvosContext = /*#__PURE__*/React.createContext(undefined);\n\nfunction cartAvosReducer(state, action) {\n  switch (action.type) {\n    case 'add':\n      {\n        const {\n          cartAvo,\n          quantity\n        } = action.payload;\n        const item = state.find(el => el.cartAvo.id === cartAvo.id);\n        const newState = [...state];\n\n        if (item) {\n          //update\n          item.quantity = quantity;\n          const index = newState.findIndex(el => el.cartAvo.id === cartAvo.id);\n          newState[index] = item;\n        } else {\n          //add\n          newState.push(action.payload);\n        }\n\n        return newState;\n      }\n\n    default:\n      {\n        throw new Error(`Unhandled action type: ${action.type}`);\n      }\n  }\n}\n\nconst initialState = [{\n  cartAvo: {},\n  quantity: 1\n}];\n\nfunction CartProvider({\n  children\n}) {\n  const [state, dispatch] = React.useReducer(cartAvosReducer, initialState);\n  const value = {\n    state,\n    dispatch\n  };\n  return __jsx(CartAvosContext.Provider, {\n    value: value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 5\n    }\n  }, children);\n}\n\nfunction useAvoCart() {\n  const context = React.useContext(CartAvosContext);\n\n  if (context === undefined) {\n    throw new Error('useAvoCart must be used within a CartAvosContext');\n  }\n\n  return context;\n}\n\nexport { CartProvider, useAvoCart };","map":{"version":3,"sources":["C:/code/avocado-store/contexts/cartAvosContext.tsx"],"names":["React","CartAvosContext","createContext","undefined","cartAvosReducer","state","action","type","cartAvo","quantity","payload","item","find","el","id","newState","index","findIndex","push","Error","initialState","CartProvider","children","dispatch","useReducer","value","useAvoCart","context","useContext"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAcA,MAAMC,eAAe,gBAAGD,KAAK,CAACE,aAAN,CAEtBC,SAFsB,CAAxB;;AAIA,SAASC,eAAT,CAAyBC,KAAzB,EAA6CC,MAA7C,EAAiE;AAC/D,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,KAAL;AAAY;AACV,cAAM;AAAEC,UAAAA,OAAF;AAAWC,UAAAA;AAAX,YAAwBH,MAAM,CAACI,OAArC;AACA,cAAMC,IAAI,GAAGN,KAAK,CAACO,IAAN,CAAYC,EAAD,IAAQA,EAAE,CAACL,OAAH,CAAWM,EAAX,KAAkBN,OAAO,CAACM,EAA7C,CAAb;AACA,cAAMC,QAAQ,GAAG,CAAC,GAAGV,KAAJ,CAAjB;;AACA,YAAIM,IAAJ,EAAU;AACR;AACAA,UAAAA,IAAI,CAACF,QAAL,GAAgBA,QAAhB;AACA,gBAAMO,KAAK,GAAGD,QAAQ,CAACE,SAAT,CAAoBJ,EAAD,IAAQA,EAAE,CAACL,OAAH,CAAWM,EAAX,KAAkBN,OAAO,CAACM,EAArD,CAAd;AACAC,UAAAA,QAAQ,CAACC,KAAD,CAAR,GAAkBL,IAAlB;AACD,SALD,MAKO;AACL;AACAI,UAAAA,QAAQ,CAACG,IAAT,CAAcZ,MAAM,CAACI,OAArB;AACD;;AACD,eAAOK,QAAP;AACD;;AACD;AAAS;AACP,cAAM,IAAII,KAAJ,CAAW,0BAAyBb,MAAM,CAACC,IAAK,EAAhD,CAAN;AACD;AAlBH;AAoBD;;AAED,MAAMa,YAAY,GAAG,CACnB;AACEZ,EAAAA,OAAO,EAAE,EADX;AAEEC,EAAAA,QAAQ,EAAE;AAFZ,CADmB,CAArB;;AAOA,SAASY,YAAT,CAAsB;AAAEC,EAAAA;AAAF,CAAtB,EAAyC;AACvC,QAAM,CAACjB,KAAD,EAAQkB,QAAR,IAAoBvB,KAAK,CAACwB,UAAN,CAAiBpB,eAAjB,EAAkCgB,YAAlC,CAA1B;AACA,QAAMK,KAAK,GAAG;AAAEpB,IAAAA,KAAF;AAASkB,IAAAA;AAAT,GAAd;AACA,SACE,MAAC,eAAD,CAAiB,QAAjB;AAA0B,IAAA,KAAK,EAAEE,KAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGH,QADH,CADF;AAKD;;AAED,SAASI,UAAT,GAAsB;AACpB,QAAMC,OAAO,GAAG3B,KAAK,CAAC4B,UAAN,CAAiB3B,eAAjB,CAAhB;;AACA,MAAI0B,OAAO,KAAKxB,SAAhB,EAA2B;AACzB,UAAM,IAAIgB,KAAJ,CAAU,kDAAV,CAAN;AACD;;AACD,SAAOQ,OAAP;AACD;;AAED,SAASN,YAAT,EAAuBK,UAAvB","sourcesContent":["import * as React from 'react'\r\n\r\ninterface CartState {\r\n  cartAvo: TProduct\r\n  quantity: number\r\n}\r\n\r\ninterface CartAction {\r\n  type: 'add'\r\n  payload: CartState\r\n}\r\n\r\ntype Dispatch = (action: CartAction) => void\r\n\r\nconst CartAvosContext = React.createContext<\r\n  { state: CartState[]; dispatch: Dispatch } | undefined\r\n>(undefined)\r\n\r\nfunction cartAvosReducer(state: CartState[], action: CartAction) {\r\n  switch (action.type) {\r\n    case 'add': {\r\n      const { cartAvo, quantity } = action.payload\r\n      const item = state.find((el) => el.cartAvo.id === cartAvo.id)\r\n      const newState = [...state]\r\n      if (item) {\r\n        //update\r\n        item.quantity = quantity\r\n        const index = newState.findIndex((el) => el.cartAvo.id === cartAvo.id)\r\n        newState[index] = item\r\n      } else {\r\n        //add\r\n        newState.push(action.payload)\r\n      }\r\n      return newState\r\n    }\r\n    default: {\r\n      throw new Error(`Unhandled action type: ${action.type}`)\r\n    }\r\n  }\r\n}\r\n\r\nconst initialState = [\r\n  {\r\n    cartAvo: {} as TProduct,\r\n    quantity: 1,\r\n  },\r\n] as CartState[]\r\n\r\nfunction CartProvider({ children }: any) {\r\n  const [state, dispatch] = React.useReducer(cartAvosReducer, initialState)\r\n  const value = { state, dispatch }\r\n  return (\r\n    <CartAvosContext.Provider value={value}>\r\n      {children}\r\n    </CartAvosContext.Provider>\r\n  )\r\n}\r\n\r\nfunction useAvoCart() {\r\n  const context = React.useContext(CartAvosContext)\r\n  if (context === undefined) {\r\n    throw new Error('useAvoCart must be used within a CartAvosContext')\r\n  }\r\n  return context\r\n}\r\n\r\nexport { CartProvider, useAvoCart }\r\n"]},"metadata":{},"sourceType":"module"}